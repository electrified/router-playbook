---
- hosts: all
  become: true
  vars:
    created_username: ed2
  tasks:
    - name: Setup passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%sudo'
        line: '%sudo ALL=(ALL) NOPASSWD: ALL'
        validate: '/usr/sbin/visudo -cf %s'

    - name: Create a new regular user with sudo privileges
      user:
        name: "{{ created_username }}"
        state: present
        groups: sudo
        append: true
        create_home: true
        shell: /bin/bash

    - name: Set authorized key for remote user
      ansible.posix.authorized_key:
        user: "{{ created_username }}"
        state: present
        key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"

    - name: Disable password authentication for root
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin prohibit-password'
        
    - name: Rename interfaces
      copy:
        dest: "/etc/udev/rules.d/05-nanopi-r5s-eth.rules"
        content: |
          SUBSYSTEM=="net", ACTION=="add", DRIVERS=="rk_gmac-dwmac", KERNEL=="eth2", NAME="wan"
          SUBSYSTEM=="net", ACTION=="add", DRIVERS=="r8169", KERNEL=="eth0", NAME="lan1"
          SUBSYSTEM=="net", ACTION=="add", DRIVERS=="r8169", KERNEL=="eth1", NAME="lan2"
    - name: Fix leds
      copy:
        dest: "/etc/udev/rules.d/10-nanopi-r5s-led.rules"
        content: |
          SUBSYSTEM=="leds", KERNEL=="green:wan", ACTION=="add", ATTR{trigger}="netdev", ATTR{device_name}="wan", ATTR{link}="1" ATTR{rx}="1" ATTR{tx}="1"
          SUBSYSTEM=="leds", KERNEL=="green:lan1", ACTION=="add", ATTR{trigger}="netdev", ATTR{device_name}="lan1", ATTR{link}="1" ATTR{rx}="1" ATTR{tx}="1"
          SUBSYSTEM=="leds", KERNEL=="green:lan2", ACTION=="add", ATTR{trigger}="netdev", ATTR{device_name}="lan2", ATTR{link}="1" ATTR{rx}="1" ATTR{tx}="1"
    # - name: Disable systemd-resolvd
    #   ansible.builtin.systemd:
    #     daemon_reload: true
    #     name: systemd-resolvd
    #     enabled: no
    #     masked: yes
    #     state: stopped
    # disable network manager
    # add wifi config for raspberry pi 4
    # ensure resovle-conf is OK
    - name: Remove system packages
      apt:
        state: absent
        pkg:
          - systemd-resolved
          - network-manager
    - name: Install required system packages
      apt:
        update_cache: true
        pkg:
          - firewalld
          - dnsmasq
          - prometheus-node-exporter
          - podman
          # - iperf3
          - lm-sensors
          - dhcpcd5
          - radvd
          - dnsutils
    - name: "Setup interfaces"
      copy:
        dest: "/etc/network/interfaces"
        content: |
          ### Interfaces
          source /etc/network/interfaces.d/*sys

          ### Loopback network interface
          auto lo
          iface lo inet loopback

          ### Ethernet
          auto lan1
          allow-hotplug lan1
          iface lan1 inet static
          address 192.168.1.1
          netmask 255.255.255.0
          #gateway 10.0.0.1
          #dns-nameservers 8.8.8.8 8.8.4.4

          auto lan2
          allow-hotplug lan2
          iface lan2 inet static
          address 192.168.2.1
          netmask 255.255.255.0

          # auto wan
          # allow-hotplug wan
          # iface wan inet dhcp
    - name: "Setup dhcpcd config"
      copy:
        src: templates/dhcpcd.conf
        dest: "/etc/dhcpcd.conf"
        backup: yes
    - name: Include the oefenweb.dnsmasq role
      include_role:
        name: oefenweb.dnsmasq
      vars:
        dnsmasq_dnsmasq_d_files_present:
          lan-setup:
            - |
              listen-address=::1,127.0.0.1,192.168.1.1,192.168.2.1
              interface=lan1, lan2
              dhcp-range=lan1,192.168.1.10,192.168.1.150,255.255.255.0,12h
              dhcp-range=lan2,192.168.2.10,192.168.2.150,255.255.255.0,12h
              dhcp-host=a4:6b:b6:3c:94:75,192.168.1.18,zoomer-w,30d
              dhcp-host=04:92:26:d9:d7:0f,192.168.1.8,zoomer,30d
              dhcp-host=98:03:9b:13:ef:64,192.168.1.9,orinoco,30d
              dhcp-host=00:47:43:61:01:29,192.168.1.7,amiga,30d
              # dhcp-host=70:c9:4e:87:3e:5d,192.168.1.19,orinoco-w,30d
              # dhcp-host=2c:fd:a1:59:7a:62,192.168.1.29,orinoco-areion,30d
              dhcp-option=option:router,192.168.1.1
              dhcp-option=6,192.168.1.1
              dhcp-authoritative
              domain-needed
              bogus-priv
              log-async
              #log-queries
              log-dhcp
              domain=badgerfields.internal
              cache-size=10000
              no-negcache
              server=/cluster.badgerfields.internal/192.168.1.9
    - name: Include the ansible_role_pppoe role
      include_role:
        name: rivimey.ansible_role_pppoe
      vars:
        pppoe_eth_dev: wan
        pppoe_client_user: "{{pppoe_client_user}}"
        pppoe_client_password: "{{pppoe_client_password}}"
        pppoe_boost_mtu: true
        pppoe_eth_mtu: 1508
        pppoe_ppp_mtu: 1500
      register: pppoe
    - name: Restart pppoe service
      ansible.builtin.systemd:
        state: restarted
        daemon_reload: true
        name: pppoe
      when: pppoe.changed
    - name: firewall - add lan1
      ansible.posix.firewalld:
        zone: internal
        interface: lan1
        state: enabled
        permanent: yes
    - name: firewall - add lan2
      ansible.posix.firewalld:
        zone: internal
        interface: lan2
        state: enabled
        permanent: yes
    - name: firewall - add wan
      ansible.posix.firewalld:
        zone: external
        interface: ppp0
        state: enabled
        permanent: yes
    - name: firewall - add internal services
      ansible.posix.firewalld:
        zone: internal
        service: "{{ item }}"
        state: enabled
        permanent: yes
      loop:
        - ssh
        - dhcp
        - dhcpv6-client
        - dns
    - name: firewall - add external services
      ansible.posix.firewalld:
        zone: external
        service: "{{ item }}"
        state: enabled
        permanent: yes
      loop:
        - dhcpv6-client
    - name: firewall - remove ssh from external
      ansible.posix.firewalld:
        zone: external
        service: ssh
        state: disabled
        permanent: yes
    - name: firewall - add masquerade external
      ansible.posix.firewalld:
        zone: external
        masquerade: yes
        state: enabled
        permanent: yes
    - name: firewall - port forward bittorent port to zoomer udp
      ansible.posix.firewalld:
        zone: external
        state: enabled
        permanent: yes
        port_forward:
          - port: 62348
            proto: udp
            toaddr: 192.168.1.8
            toport: 62348
    - name: firewall - port forward bittorent port to zoomer tcp
      ansible.posix.firewalld:
        zone: external
        state: enabled
        permanent: yes
        port_forward:
          - port: 62348
            proto: tcp
            toaddr: 192.168.1.8
            toport: 62348
    # - name: firewall - port forward ssh port to zoomer tcp
    #   ansible.posix.firewalld:
    #     zone: external
    #     state: enabled
    #     permanent: yes
    #     port_forward:
    #       - port: 62123
    #         proto: tcp
    #         toaddr: 192.168.1.8
    #         toport: 22
    - name: firewall - add default drop rule
      ansible.posix.firewalld:
        zone: external
        target: DROP
        state: enabled
        permanent: yes
    - name: sysctl - enable forwarding
      ansible.posix.sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        sysctl_set: yes
        state: present
        reload: yes
      loop:
      - { key: 'net.ipv4.ip_forward', value: '1' }
      - { key: 'net.ipv6.conf.all.forwarding', value: '1' }
      # allow testing with buffers up to 64MB 
      - { key: 'net.core.rmem_max', value: '67108864' }
      - { key: 'net.core.wmem_max', value: '67108864' }
      # increase Linux autotuning TCP buffer limit to 32MB
      - { key: 'net.ipv4.tcp_rmem', value: '4096 87380 33554432' }
      - { key: 'net.ipv4.tcp_wmem', value: '4096 65536 33554432' }
      # recommended default congestion control is htcp 
      - { key: 'net.ipv4.tcp_congestion_control', value: 'htcp' }
      # recommended for hosts with jumbo frames enabled
      - { key: 'net.ipv4.tcp_mtu_probing', value: '1' }
      # recommended to enable 'fair queueing'
      - { key: 'net.core.default_qdisc', value: 'fq' }
    - name: firewall - open port for node exporter
      ansible.posix.firewalld:
        port: 9100/tcp
        permanent: yes
        state: enabled
        zone: internal
    - name: firewall - open port for ntopng
      ansible.posix.firewalld:
        port: 3000/tcp
        permanent: yes
        state: enabled
        zone: internal
    - name: firewall - open port for iperf3
      ansible.posix.firewalld:
        port: 5201/tcp
        permanent: yes
        state: enabled
        zone: internal
    - name: firewall - open port for iperf3
      ansible.posix.firewalld:
        port: 5201/udp
        permanent: yes
        state: enabled
        zone: internal
    - name: firewall - open ports for omada controller
      ansible.posix.firewalld:
        port: "{{ item }}"
        permanent: yes
        state: enabled
        zone: internal
      loop:
        - "8088/tcp"
        - "8043/tcp"
        - "8843/tcp"
        - "27001/udp"
        - "29810/udp"
        - "29811/tcp"
        - "29812/tcp"
        - "29813/tcp"
        - "29814/tcp"
    - name: firewall - Reload firewalld
      command: /usr/bin/firewall-cmd --reload
    - name: Pull an image
      containers.podman.podman_image:
        name: docker.io/mbentley/omada-controller:5.14.26.1
    - name: Run omada container
      containers.podman.podman_container:
        name: omada-controller
        image: mbentley/omada-controller:5.14.26.1
        network: host
        state: started
        env:
          MANAGE_HTTP_PORT: 8088
          MANAGE_HTTPS_PORT: 8043
          PGID: 508
          PORTAL_HTTP_PORT: 8088
          PORTAL_HTTPS_PORT: 8843
          PORT_ADOPT_V1: 29812
          PORT_APP_DISCOVERY: 27001
          PORT_DISCOVERY: 29810
          PORT_MANAGER_V1: 29811
          PORT_MANAGER_V2: 29814
          PORT_TRANSFER_V2: 29815
          PORT_RTTY: 29816
          PORT_UPGRADE_V1: 29813
          PUID: 508
          SHOW_SERVER_LOGS: true
          SHOW_MONGODB_LOGS: false
          SSL_CERT_NAME: "tls.crt"
          SSL_KEY_NAME: "tls.key"
          TZ: "Europe/London"
        volumes:
        - omada-data:/opt/tplink/EAPController/data
        - omada-logs:/opt/tplink/EAPController/logs
        ports:
        - "8088:8088"
        - "8043:8043"
        - "8843:8843"
        - "27001:27001/udp"
        - "29810:29810/udp"
        - "29811:29811"
        - "29812:29812"
        - "29813:29813"
        - "29814:29814"
        - "29815:29815"
        - "29816:29816"
        generate_systemd:
          path: /etc/systemd/system/
          restart_policy: always
          time: 120
          names: true
    - name: Enable service omada-controller and ensure it is not masked
      ansible.builtin.systemd:
        daemon_reload: true
        name: container-omada-controller
        # enabled: no
        # masked: yes
        state: started
    - name: "Setup radvd config"
      copy:
        src: templates/radvd.conf
        dest: "/etc/radvd.conf"
        backup: yes
    - name: Enable radvd service
      ansible.builtin.systemd:
        daemon_reload: true
        name: radvd
        enabled: yes
        masked: no
        state: started
    - name: Include the linux-system-roles.journald role
      include_role:
        name: linux-system-roles.journald
      vars:
        journald_persistent: false
        journald_max_disk_size: 300
